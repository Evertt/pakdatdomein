<%_
func props(_ parameters: [MethodParameter], indent: Int) -> String {
    return parameters
        .filter { $0.name != "id" && $0.name != "version" }
        .map { "public let \($0.name): \($0.typeName)" }
        .joined(separator: "\n" + String(repeating: " ", count: indent))
}

func nit(_ parameters: [MethodParameter]) -> String {
    return parameters
        .filter { $0.name != "id" && $0.name != "version" }
        .map { ", \($0.name): \($0.typeName)" }
        .joined(separator: "")
}

func inits(_ parameters: [MethodParameter], indent: Int) -> String {
    return parameters
        .filter { $0.name != "id" && $0.name != "version" }
        .map { "self.\($0.name) = \($0.name)" }
        .joined(separator: "\n" + String(repeating: " ", count: indent))
}

extension String {
    var capitalizedFL: String {
        return prefix(1).capitalized + dropFirst()
    }
}

extension SourceryMethod {
    var isCommand: Bool {
        return accessLevel == "public" && annotations["commands"] != nil
    }

    var isEvent: Bool {
        return annotations["events"] != nil
    }
}

for type in types.implementing["AggregateRoot"] { _%>
extension <%= type.name %> {
    <%_ for method in type.methods where method.isCommand || method.isEvent { _%>
    public struct <%= method.callName.capitalizedFL %>: <%= method.isCommand ? "Command" : "Event" %> {
        public let id: ID<%= method.isEvent ? "\n        public let version: Int" : "" %>
        <%= props(method.parameters, indent: 8) %>

        public init(id: ID<%= method.isEvent ? ", version: Int" : "" %><%= nit(method.parameters) %>) {
            self.id = id<%= method.isEvent ? "\n            self.version = version" : "" %>
            <%= inits(method.parameters, indent: 12) %>
        }
    }

    <%= method.accessLevel %><%= method.isStatic ? " static" : "" %> func <%= method.callName %>(<%= method.isCommand ? "command" : "event" %>: <%= method.callName.capitalizedFL %>) <%= method.throws ? "throws " : "" %><%= method.returnType != nil ? "-> \(method.returnTypeName) " : "" %>{
        <%= method.returnType != nil ? "return " : "" %><%= method.throws ? "try " : "" %><%= method.callName %>(<%= method.parameters.map({"\($0.name): " + (method.isCommand ? "command" : "event") + ".\($0.name)"}).joined(separator: ", ") %>)
    }
    <%_ } _%><%_ if type.methods.filter({$0.isCommand}).count > 0 { _%>
    public static let handles = __(
        <%= type.methods.filter({$0.isCommand}).map({"~\($0.callName)"}).joined(separator: ",\n        ") %>
    )
    <%_ } _%><%_ if type.methods.filter({$0.isEvent}).count > 0 { _%>
    public static let applies = __(
        <%= type.methods.filter({$0.isEvent}).map({"~\($0.callName)"}).joined(separator: ",\n        ") %>
    )
    <%_ } _%>
}
<%_ } _%>