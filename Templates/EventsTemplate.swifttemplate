<%

extension String {
    var lcFirst: String {
        return prefix(1).lowercased() + dropFirst()
    }
}

extension Type {
    var isNew: Bool {
        return localName.prefix(3) == "New"
    }
}

let aggregateRoots = types.implementing["AggregateRoot"]
var events = [String:[Type]]()

for root in aggregateRoots {
    events[root.name] = types.implementing["Event"].filter({$0.parent?.name == root.name})
}

for root in aggregateRoots { _%>
extension <%= root.name %> {
    <% for event in (events[root.name] ?? []) { %>
    <%= event.isNew ? "static " : "" %>func <%= event.localName.lcFirst %>(event: <%= event.localName %>)<%= event.isNew ? " -> \(root.name)" : "" %>
    }
    <% } %>
}
<%_ } _%>